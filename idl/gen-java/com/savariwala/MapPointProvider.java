/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.savariwala;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MapPointProvider {

  public interface Iface {

    public List<MapPoint> getMapPoint(boolean isSrc, double latitude, double longitude) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getMapPoint(boolean isSrc, double latitude, double longitude, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<MapPoint> getMapPoint(boolean isSrc, double latitude, double longitude) throws org.apache.thrift.TException
    {
      send_getMapPoint(isSrc, latitude, longitude);
      return recv_getMapPoint();
    }

    public void send_getMapPoint(boolean isSrc, double latitude, double longitude) throws org.apache.thrift.TException
    {
      getMapPoint_args args = new getMapPoint_args();
      args.setIsSrc(isSrc);
      args.setLatitude(latitude);
      args.setLongitude(longitude);
      sendBase("getMapPoint", args);
    }

    public List<MapPoint> recv_getMapPoint() throws org.apache.thrift.TException
    {
      getMapPoint_result result = new getMapPoint_result();
      receiveBase(result, "getMapPoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMapPoint failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getMapPoint(boolean isSrc, double latitude, double longitude, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMapPoint_call method_call = new getMapPoint_call(isSrc, latitude, longitude, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMapPoint_call extends org.apache.thrift.async.TAsyncMethodCall {
      private boolean isSrc;
      private double latitude;
      private double longitude;
      public getMapPoint_call(boolean isSrc, double latitude, double longitude, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.isSrc = isSrc;
        this.latitude = latitude;
        this.longitude = longitude;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMapPoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMapPoint_args args = new getMapPoint_args();
        args.setIsSrc(isSrc);
        args.setLatitude(latitude);
        args.setLongitude(longitude);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MapPoint> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMapPoint();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getMapPoint", new getMapPoint());
      return processMap;
    }

    public static class getMapPoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMapPoint_args> {
      public getMapPoint() {
        super("getMapPoint");
      }

      public getMapPoint_args getEmptyArgsInstance() {
        return new getMapPoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMapPoint_result getResult(I iface, getMapPoint_args args) throws org.apache.thrift.TException {
        getMapPoint_result result = new getMapPoint_result();
        result.success = iface.getMapPoint(args.isSrc, args.latitude, args.longitude);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getMapPoint", new getMapPoint());
      return processMap;
    }

    public static class getMapPoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMapPoint_args, List<MapPoint>> {
      public getMapPoint() {
        super("getMapPoint");
      }

      public getMapPoint_args getEmptyArgsInstance() {
        return new getMapPoint_args();
      }

      public AsyncMethodCallback<List<MapPoint>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MapPoint>>() { 
          public void onComplete(List<MapPoint> o) {
            getMapPoint_result result = new getMapPoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMapPoint_result result = new getMapPoint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMapPoint_args args, org.apache.thrift.async.AsyncMethodCallback<List<MapPoint>> resultHandler) throws TException {
        iface.getMapPoint(args.isSrc, args.latitude, args.longitude,resultHandler);
      }
    }

  }

  public static class getMapPoint_args implements org.apache.thrift.TBase<getMapPoint_args, getMapPoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMapPoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMapPoint_args");

    private static final org.apache.thrift.protocol.TField IS_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("isSrc", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMapPoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMapPoint_argsTupleSchemeFactory());
    }

    public boolean isSrc; // required
    public double latitude; // required
    public double longitude; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IS_SRC((short)1, "isSrc"),
      LATITUDE((short)2, "latitude"),
      LONGITUDE((short)3, "longitude");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IS_SRC
            return IS_SRC;
          case 2: // LATITUDE
            return LATITUDE;
          case 3: // LONGITUDE
            return LONGITUDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISSRC_ISSET_ID = 0;
    private static final int __LATITUDE_ISSET_ID = 1;
    private static final int __LONGITUDE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IS_SRC, new org.apache.thrift.meta_data.FieldMetaData("isSrc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMapPoint_args.class, metaDataMap);
    }

    public getMapPoint_args() {
    }

    public getMapPoint_args(
      boolean isSrc,
      double latitude,
      double longitude)
    {
      this();
      this.isSrc = isSrc;
      setIsSrcIsSet(true);
      this.latitude = latitude;
      setLatitudeIsSet(true);
      this.longitude = longitude;
      setLongitudeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMapPoint_args(getMapPoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.isSrc = other.isSrc;
      this.latitude = other.latitude;
      this.longitude = other.longitude;
    }

    public getMapPoint_args deepCopy() {
      return new getMapPoint_args(this);
    }

    @Override
    public void clear() {
      setIsSrcIsSet(false);
      this.isSrc = false;
      setLatitudeIsSet(false);
      this.latitude = 0.0;
      setLongitudeIsSet(false);
      this.longitude = 0.0;
    }

    public boolean isIsSrc() {
      return this.isSrc;
    }

    public getMapPoint_args setIsSrc(boolean isSrc) {
      this.isSrc = isSrc;
      setIsSrcIsSet(true);
      return this;
    }

    public void unsetIsSrc() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSRC_ISSET_ID);
    }

    /** Returns true if field isSrc is set (has been assigned a value) and false otherwise */
    public boolean isSetIsSrc() {
      return EncodingUtils.testBit(__isset_bitfield, __ISSRC_ISSET_ID);
    }

    public void setIsSrcIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSRC_ISSET_ID, value);
    }

    public double getLatitude() {
      return this.latitude;
    }

    public getMapPoint_args setLatitude(double latitude) {
      this.latitude = latitude;
      setLatitudeIsSet(true);
      return this;
    }

    public void unsetLatitude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
    }

    /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
    public boolean isSetLatitude() {
      return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
    }

    public void setLatitudeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
    }

    public double getLongitude() {
      return this.longitude;
    }

    public getMapPoint_args setLongitude(double longitude) {
      this.longitude = longitude;
      setLongitudeIsSet(true);
      return this;
    }

    public void unsetLongitude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
    }

    /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
    public boolean isSetLongitude() {
      return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
    }

    public void setLongitudeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IS_SRC:
        if (value == null) {
          unsetIsSrc();
        } else {
          setIsSrc((Boolean)value);
        }
        break;

      case LATITUDE:
        if (value == null) {
          unsetLatitude();
        } else {
          setLatitude((Double)value);
        }
        break;

      case LONGITUDE:
        if (value == null) {
          unsetLongitude();
        } else {
          setLongitude((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IS_SRC:
        return Boolean.valueOf(isIsSrc());

      case LATITUDE:
        return Double.valueOf(getLatitude());

      case LONGITUDE:
        return Double.valueOf(getLongitude());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IS_SRC:
        return isSetIsSrc();
      case LATITUDE:
        return isSetLatitude();
      case LONGITUDE:
        return isSetLongitude();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMapPoint_args)
        return this.equals((getMapPoint_args)that);
      return false;
    }

    public boolean equals(getMapPoint_args that) {
      if (that == null)
        return false;

      boolean this_present_isSrc = true;
      boolean that_present_isSrc = true;
      if (this_present_isSrc || that_present_isSrc) {
        if (!(this_present_isSrc && that_present_isSrc))
          return false;
        if (this.isSrc != that.isSrc)
          return false;
      }

      boolean this_present_latitude = true;
      boolean that_present_latitude = true;
      if (this_present_latitude || that_present_latitude) {
        if (!(this_present_latitude && that_present_latitude))
          return false;
        if (this.latitude != that.latitude)
          return false;
      }

      boolean this_present_longitude = true;
      boolean that_present_longitude = true;
      if (this_present_longitude || that_present_longitude) {
        if (!(this_present_longitude && that_present_longitude))
          return false;
        if (this.longitude != that.longitude)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMapPoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIsSrc()).compareTo(other.isSetIsSrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsSrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSrc, other.isSrc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLatitude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongitude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMapPoint_args(");
      boolean first = true;

      sb.append("isSrc:");
      sb.append(this.isSrc);
      first = false;
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMapPoint_argsStandardSchemeFactory implements SchemeFactory {
      public getMapPoint_argsStandardScheme getScheme() {
        return new getMapPoint_argsStandardScheme();
      }
    }

    private static class getMapPoint_argsStandardScheme extends StandardScheme<getMapPoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMapPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IS_SRC
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isSrc = iprot.readBool();
                struct.setIsSrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LATITUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.latitude = iprot.readDouble();
                struct.setLatitudeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LONGITUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.longitude = iprot.readDouble();
                struct.setLongitudeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMapPoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(IS_SRC_FIELD_DESC);
        oprot.writeBool(struct.isSrc);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.latitude);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.longitude);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMapPoint_argsTupleSchemeFactory implements SchemeFactory {
      public getMapPoint_argsTupleScheme getScheme() {
        return new getMapPoint_argsTupleScheme();
      }
    }

    private static class getMapPoint_argsTupleScheme extends TupleScheme<getMapPoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMapPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIsSrc()) {
          optionals.set(0);
        }
        if (struct.isSetLatitude()) {
          optionals.set(1);
        }
        if (struct.isSetLongitude()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIsSrc()) {
          oprot.writeBool(struct.isSrc);
        }
        if (struct.isSetLatitude()) {
          oprot.writeDouble(struct.latitude);
        }
        if (struct.isSetLongitude()) {
          oprot.writeDouble(struct.longitude);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMapPoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.isSrc = iprot.readBool();
          struct.setIsSrcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.latitude = iprot.readDouble();
          struct.setLatitudeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.longitude = iprot.readDouble();
          struct.setLongitudeIsSet(true);
        }
      }
    }

  }

  public static class getMapPoint_result implements org.apache.thrift.TBase<getMapPoint_result, getMapPoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMapPoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMapPoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMapPoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMapPoint_resultTupleSchemeFactory());
    }

    public List<MapPoint> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MapPoint.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMapPoint_result.class, metaDataMap);
    }

    public getMapPoint_result() {
    }

    public getMapPoint_result(
      List<MapPoint> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMapPoint_result(getMapPoint_result other) {
      if (other.isSetSuccess()) {
        List<MapPoint> __this__success = new ArrayList<MapPoint>(other.success.size());
        for (MapPoint other_element : other.success) {
          __this__success.add(new MapPoint(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMapPoint_result deepCopy() {
      return new getMapPoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MapPoint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MapPoint elem) {
      if (this.success == null) {
        this.success = new ArrayList<MapPoint>();
      }
      this.success.add(elem);
    }

    public List<MapPoint> getSuccess() {
      return this.success;
    }

    public getMapPoint_result setSuccess(List<MapPoint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MapPoint>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMapPoint_result)
        return this.equals((getMapPoint_result)that);
      return false;
    }

    public boolean equals(getMapPoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMapPoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMapPoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMapPoint_resultStandardSchemeFactory implements SchemeFactory {
      public getMapPoint_resultStandardScheme getScheme() {
        return new getMapPoint_resultStandardScheme();
      }
    }

    private static class getMapPoint_resultStandardScheme extends StandardScheme<getMapPoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMapPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<MapPoint>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    MapPoint _elem2;
                    _elem2 = new MapPoint();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMapPoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MapPoint _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMapPoint_resultTupleSchemeFactory implements SchemeFactory {
      public getMapPoint_resultTupleScheme getScheme() {
        return new getMapPoint_resultTupleScheme();
      }
    }

    private static class getMapPoint_resultTupleScheme extends TupleScheme<getMapPoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMapPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MapPoint _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMapPoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MapPoint>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              MapPoint _elem7;
              _elem7 = new MapPoint();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
