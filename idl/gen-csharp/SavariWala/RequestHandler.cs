/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SavariWala
{
  public partial class RequestHandler {
    public interface Iface {
      long submitBooking(BookingDetails booking, string routeJson);
      #if SILVERLIGHT
      IAsyncResult Begin_submitBooking(AsyncCallback callback, object state, BookingDetails booking, string routeJson);
      long End_submitBooking(IAsyncResult asyncResult);
      #endif
      BookingDetails getDetails(long bookingId);
      #if SILVERLIGHT
      IAsyncResult Begin_getDetails(AsyncCallback callback, object state, long bookingId);
      BookingDetails End_getDetails(IAsyncResult asyncResult);
      #endif
      bool cancel(long bookingId);
      #if SILVERLIGHT
      IAsyncResult Begin_cancel(AsyncCallback callback, object state, long bookingId);
      bool End_cancel(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_submitBooking(AsyncCallback callback, object state, BookingDetails booking, string routeJson)
      {
        return send_submitBooking(callback, state, booking, routeJson);
      }

      public long End_submitBooking(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_submitBooking();
      }

      #endif

      public long submitBooking(BookingDetails booking, string routeJson)
      {
        #if !SILVERLIGHT
        send_submitBooking(booking, routeJson);
        return recv_submitBooking();

        #else
        var asyncResult = Begin_submitBooking(null, null, booking, routeJson);
        return End_submitBooking(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_submitBooking(AsyncCallback callback, object state, BookingDetails booking, string routeJson)
      #else
      public void send_submitBooking(BookingDetails booking, string routeJson)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("submitBooking", TMessageType.Call, seqid_));
        submitBooking_args args = new submitBooking_args();
        args.Booking = booking;
        args.RouteJson = routeJson;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_submitBooking()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        submitBooking_result result = new submitBooking_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.err) {
          throw result.Err;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "submitBooking failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getDetails(AsyncCallback callback, object state, long bookingId)
      {
        return send_getDetails(callback, state, bookingId);
      }

      public BookingDetails End_getDetails(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getDetails();
      }

      #endif

      public BookingDetails getDetails(long bookingId)
      {
        #if !SILVERLIGHT
        send_getDetails(bookingId);
        return recv_getDetails();

        #else
        var asyncResult = Begin_getDetails(null, null, bookingId);
        return End_getDetails(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getDetails(AsyncCallback callback, object state, long bookingId)
      #else
      public void send_getDetails(long bookingId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getDetails", TMessageType.Call, seqid_));
        getDetails_args args = new getDetails_args();
        args.BookingId = bookingId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BookingDetails recv_getDetails()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getDetails_result result = new getDetails_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDetails failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancel(AsyncCallback callback, object state, long bookingId)
      {
        return send_cancel(callback, state, bookingId);
      }

      public bool End_cancel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_cancel();
      }

      #endif

      public bool cancel(long bookingId)
      {
        #if !SILVERLIGHT
        send_cancel(bookingId);
        return recv_cancel();

        #else
        var asyncResult = Begin_cancel(null, null, bookingId);
        return End_cancel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancel(AsyncCallback callback, object state, long bookingId)
      #else
      public void send_cancel(long bookingId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancel", TMessageType.Call, seqid_));
        cancel_args args = new cancel_args();
        args.BookingId = bookingId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancel_result result = new cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancel failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["submitBooking"] = submitBooking_Process;
        processMap_["getDetails"] = getDetails_Process;
        processMap_["cancel"] = cancel_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void submitBooking_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        submitBooking_args args = new submitBooking_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        submitBooking_result result = new submitBooking_result();
        try {
          result.Success = iface_.submitBooking(args.Booking, args.RouteJson);
        } catch (SavariWala.ServerError err) {
          result.Err = err;
        }
        oprot.WriteMessageBegin(new TMessage("submitBooking", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getDetails_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getDetails_args args = new getDetails_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getDetails_result result = new getDetails_result();
        result.Success = iface_.getDetails(args.BookingId);
        oprot.WriteMessageBegin(new TMessage("getDetails", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancel_args args = new cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancel_result result = new cancel_result();
        result.Success = iface_.cancel(args.BookingId);
        oprot.WriteMessageBegin(new TMessage("cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class submitBooking_args : TBase
    {
      private BookingDetails _booking;
      private string _routeJson;

      public BookingDetails Booking
      {
        get
        {
          return _booking;
        }
        set
        {
          __isset.booking = true;
          this._booking = value;
        }
      }

      public string RouteJson
      {
        get
        {
          return _routeJson;
        }
        set
        {
          __isset.routeJson = true;
          this._routeJson = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool booking;
        public bool routeJson;
      }

      public submitBooking_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Booking = new BookingDetails();
                Booking.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RouteJson = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("submitBooking_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Booking != null && __isset.booking) {
          field.Name = "booking";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Booking.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RouteJson != null && __isset.routeJson) {
          field.Name = "routeJson";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RouteJson);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("submitBooking_args(");
        sb.Append("Booking: ");
        sb.Append(Booking== null ? "<null>" : Booking.ToString());
        sb.Append(",RouteJson: ");
        sb.Append(RouteJson);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class submitBooking_result : TBase
    {
      private long _success;
      private SavariWala.ServerError _err;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public SavariWala.ServerError Err
      {
        get
        {
          return _err;
        }
        set
        {
          __isset.err = true;
          this._err = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool err;
      }

      public submitBooking_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Err = new SavariWala.ServerError();
                Err.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("submitBooking_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.err) {
          if (Err != null) {
            field.Name = "Err";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Err.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("submitBooking_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Err: ");
        sb.Append(Err== null ? "<null>" : Err.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDetails_args : TBase
    {
      private long _bookingId;

      public long BookingId
      {
        get
        {
          return _bookingId;
        }
        set
        {
          __isset.bookingId = true;
          this._bookingId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bookingId;
      }

      public getDetails_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                BookingId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDetails_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.bookingId) {
          field.Name = "bookingId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BookingId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDetails_args(");
        sb.Append("BookingId: ");
        sb.Append(BookingId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getDetails_result : TBase
    {
      private BookingDetails _success;

      public BookingDetails Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getDetails_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BookingDetails();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getDetails_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getDetails_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_args : TBase
    {
      private long _bookingId;

      public long BookingId
      {
        get
        {
          return _bookingId;
        }
        set
        {
          __isset.bookingId = true;
          this._bookingId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool bookingId;
      }

      public cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                BookingId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.bookingId) {
          field.Name = "bookingId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BookingId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_args(");
        sb.Append("BookingId: ");
        sb.Append(BookingId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancel_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("cancel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("cancel_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
