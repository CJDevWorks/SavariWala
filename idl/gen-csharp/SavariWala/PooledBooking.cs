/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SavariWala
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PooledBooking : TBase
  {
    private int _numPax;
    private long _startTime;
    private SavariWala.MapPoint _src;
    private SavariWala.MapPoint _dst;

    public int NumPax
    {
      get
      {
        return _numPax;
      }
      set
      {
        __isset.numPax = true;
        this._numPax = value;
      }
    }

    public long StartTime
    {
      get
      {
        return _startTime;
      }
      set
      {
        __isset.startTime = true;
        this._startTime = value;
      }
    }

    public SavariWala.MapPoint Src
    {
      get
      {
        return _src;
      }
      set
      {
        __isset.src = true;
        this._src = value;
      }
    }

    public SavariWala.MapPoint Dst
    {
      get
      {
        return _dst;
      }
      set
      {
        __isset.dst = true;
        this._dst = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool numPax;
      public bool startTime;
      public bool src;
      public bool dst;
    }

    public PooledBooking() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              NumPax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Src = new SavariWala.MapPoint();
              Src.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Dst = new SavariWala.MapPoint();
              Dst.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PooledBooking");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.numPax) {
        field.Name = "numPax";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumPax);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (Src != null && __isset.src) {
        field.Name = "src";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Src.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Dst != null && __isset.dst) {
        field.Name = "dst";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Dst.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PooledBooking(");
      sb.Append("NumPax: ");
      sb.Append(NumPax);
      sb.Append(",StartTime: ");
      sb.Append(StartTime);
      sb.Append(",Src: ");
      sb.Append(Src== null ? "<null>" : Src.ToString());
      sb.Append(",Dst: ");
      sb.Append(Dst== null ? "<null>" : Dst.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
