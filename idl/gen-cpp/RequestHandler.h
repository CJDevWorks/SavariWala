/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RequestHandler_H
#define RequestHandler_H

#include <thrift/TDispatchProcessor.h>
#include "RequestHandler_types.h"

namespace savariwala {

class RequestHandlerIf {
 public:
  virtual ~RequestHandlerIf() {}
  virtual int64_t submitBooking(const  ::savariwala::MapPoint& src, const  ::savariwala::MapPoint& dst, const int32_t numPax) = 0;
  virtual void getDetails(BookingDetails& _return, const int64_t bookingId) = 0;
  virtual bool cancel(const int64_t bookingId) = 0;
};

class RequestHandlerIfFactory {
 public:
  typedef RequestHandlerIf Handler;

  virtual ~RequestHandlerIfFactory() {}

  virtual RequestHandlerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RequestHandlerIf* /* handler */) = 0;
};

class RequestHandlerIfSingletonFactory : virtual public RequestHandlerIfFactory {
 public:
  RequestHandlerIfSingletonFactory(const boost::shared_ptr<RequestHandlerIf>& iface) : iface_(iface) {}
  virtual ~RequestHandlerIfSingletonFactory() {}

  virtual RequestHandlerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RequestHandlerIf* /* handler */) {}

 protected:
  boost::shared_ptr<RequestHandlerIf> iface_;
};

class RequestHandlerNull : virtual public RequestHandlerIf {
 public:
  virtual ~RequestHandlerNull() {}
  int64_t submitBooking(const  ::savariwala::MapPoint& /* src */, const  ::savariwala::MapPoint& /* dst */, const int32_t /* numPax */) {
    int64_t _return = 0;
    return _return;
  }
  void getDetails(BookingDetails& /* _return */, const int64_t /* bookingId */) {
    return;
  }
  bool cancel(const int64_t /* bookingId */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _RequestHandler_submitBooking_args__isset {
  _RequestHandler_submitBooking_args__isset() : src(false), dst(false), numPax(false) {}
  bool src;
  bool dst;
  bool numPax;
} _RequestHandler_submitBooking_args__isset;

class RequestHandler_submitBooking_args {
 public:

  RequestHandler_submitBooking_args() : numPax(0) {
  }

  virtual ~RequestHandler_submitBooking_args() throw() {}

   ::savariwala::MapPoint src;
   ::savariwala::MapPoint dst;
  int32_t numPax;

  _RequestHandler_submitBooking_args__isset __isset;

  void __set_src(const  ::savariwala::MapPoint& val) {
    src = val;
  }

  void __set_dst(const  ::savariwala::MapPoint& val) {
    dst = val;
  }

  void __set_numPax(const int32_t val) {
    numPax = val;
  }

  bool operator == (const RequestHandler_submitBooking_args & rhs) const
  {
    if (!(src == rhs.src))
      return false;
    if (!(dst == rhs.dst))
      return false;
    if (!(numPax == rhs.numPax))
      return false;
    return true;
  }
  bool operator != (const RequestHandler_submitBooking_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestHandler_submitBooking_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RequestHandler_submitBooking_pargs {
 public:


  virtual ~RequestHandler_submitBooking_pargs() throw() {}

  const  ::savariwala::MapPoint* src;
  const  ::savariwala::MapPoint* dst;
  const int32_t* numPax;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RequestHandler_submitBooking_result__isset {
  _RequestHandler_submitBooking_result__isset() : success(false) {}
  bool success;
} _RequestHandler_submitBooking_result__isset;

class RequestHandler_submitBooking_result {
 public:

  RequestHandler_submitBooking_result() : success(0) {
  }

  virtual ~RequestHandler_submitBooking_result() throw() {}

  int64_t success;

  _RequestHandler_submitBooking_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const RequestHandler_submitBooking_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RequestHandler_submitBooking_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestHandler_submitBooking_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RequestHandler_submitBooking_presult__isset {
  _RequestHandler_submitBooking_presult__isset() : success(false) {}
  bool success;
} _RequestHandler_submitBooking_presult__isset;

class RequestHandler_submitBooking_presult {
 public:


  virtual ~RequestHandler_submitBooking_presult() throw() {}

  int64_t* success;

  _RequestHandler_submitBooking_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RequestHandler_getDetails_args__isset {
  _RequestHandler_getDetails_args__isset() : bookingId(false) {}
  bool bookingId;
} _RequestHandler_getDetails_args__isset;

class RequestHandler_getDetails_args {
 public:

  RequestHandler_getDetails_args() : bookingId(0) {
  }

  virtual ~RequestHandler_getDetails_args() throw() {}

  int64_t bookingId;

  _RequestHandler_getDetails_args__isset __isset;

  void __set_bookingId(const int64_t val) {
    bookingId = val;
  }

  bool operator == (const RequestHandler_getDetails_args & rhs) const
  {
    if (!(bookingId == rhs.bookingId))
      return false;
    return true;
  }
  bool operator != (const RequestHandler_getDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestHandler_getDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RequestHandler_getDetails_pargs {
 public:


  virtual ~RequestHandler_getDetails_pargs() throw() {}

  const int64_t* bookingId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RequestHandler_getDetails_result__isset {
  _RequestHandler_getDetails_result__isset() : success(false) {}
  bool success;
} _RequestHandler_getDetails_result__isset;

class RequestHandler_getDetails_result {
 public:

  RequestHandler_getDetails_result() {
  }

  virtual ~RequestHandler_getDetails_result() throw() {}

  BookingDetails success;

  _RequestHandler_getDetails_result__isset __isset;

  void __set_success(const BookingDetails& val) {
    success = val;
  }

  bool operator == (const RequestHandler_getDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RequestHandler_getDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestHandler_getDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RequestHandler_getDetails_presult__isset {
  _RequestHandler_getDetails_presult__isset() : success(false) {}
  bool success;
} _RequestHandler_getDetails_presult__isset;

class RequestHandler_getDetails_presult {
 public:


  virtual ~RequestHandler_getDetails_presult() throw() {}

  BookingDetails* success;

  _RequestHandler_getDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RequestHandler_cancel_args__isset {
  _RequestHandler_cancel_args__isset() : bookingId(false) {}
  bool bookingId;
} _RequestHandler_cancel_args__isset;

class RequestHandler_cancel_args {
 public:

  RequestHandler_cancel_args() : bookingId(0) {
  }

  virtual ~RequestHandler_cancel_args() throw() {}

  int64_t bookingId;

  _RequestHandler_cancel_args__isset __isset;

  void __set_bookingId(const int64_t val) {
    bookingId = val;
  }

  bool operator == (const RequestHandler_cancel_args & rhs) const
  {
    if (!(bookingId == rhs.bookingId))
      return false;
    return true;
  }
  bool operator != (const RequestHandler_cancel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestHandler_cancel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RequestHandler_cancel_pargs {
 public:


  virtual ~RequestHandler_cancel_pargs() throw() {}

  const int64_t* bookingId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RequestHandler_cancel_result__isset {
  _RequestHandler_cancel_result__isset() : success(false) {}
  bool success;
} _RequestHandler_cancel_result__isset;

class RequestHandler_cancel_result {
 public:

  RequestHandler_cancel_result() : success(0) {
  }

  virtual ~RequestHandler_cancel_result() throw() {}

  bool success;

  _RequestHandler_cancel_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const RequestHandler_cancel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RequestHandler_cancel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestHandler_cancel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RequestHandler_cancel_presult__isset {
  _RequestHandler_cancel_presult__isset() : success(false) {}
  bool success;
} _RequestHandler_cancel_presult__isset;

class RequestHandler_cancel_presult {
 public:


  virtual ~RequestHandler_cancel_presult() throw() {}

  bool* success;

  _RequestHandler_cancel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RequestHandlerClient : virtual public RequestHandlerIf {
 public:
  RequestHandlerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RequestHandlerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t submitBooking(const  ::savariwala::MapPoint& src, const  ::savariwala::MapPoint& dst, const int32_t numPax);
  void send_submitBooking(const  ::savariwala::MapPoint& src, const  ::savariwala::MapPoint& dst, const int32_t numPax);
  int64_t recv_submitBooking();
  void getDetails(BookingDetails& _return, const int64_t bookingId);
  void send_getDetails(const int64_t bookingId);
  void recv_getDetails(BookingDetails& _return);
  bool cancel(const int64_t bookingId);
  void send_cancel(const int64_t bookingId);
  bool recv_cancel();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RequestHandlerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RequestHandlerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RequestHandlerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_submitBooking(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RequestHandlerProcessor(boost::shared_ptr<RequestHandlerIf> iface) :
    iface_(iface) {
    processMap_["submitBooking"] = &RequestHandlerProcessor::process_submitBooking;
    processMap_["getDetails"] = &RequestHandlerProcessor::process_getDetails;
    processMap_["cancel"] = &RequestHandlerProcessor::process_cancel;
  }

  virtual ~RequestHandlerProcessor() {}
};

class RequestHandlerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RequestHandlerProcessorFactory(const ::boost::shared_ptr< RequestHandlerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RequestHandlerIfFactory > handlerFactory_;
};

class RequestHandlerMultiface : virtual public RequestHandlerIf {
 public:
  RequestHandlerMultiface(std::vector<boost::shared_ptr<RequestHandlerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RequestHandlerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RequestHandlerIf> > ifaces_;
  RequestHandlerMultiface() {}
  void add(boost::shared_ptr<RequestHandlerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t submitBooking(const  ::savariwala::MapPoint& src, const  ::savariwala::MapPoint& dst, const int32_t numPax) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->submitBooking(src, dst, numPax);
    }
    return ifaces_[i]->submitBooking(src, dst, numPax);
  }

  void getDetails(BookingDetails& _return, const int64_t bookingId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDetails(_return, bookingId);
    }
    ifaces_[i]->getDetails(_return, bookingId);
    return;
  }

  bool cancel(const int64_t bookingId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancel(bookingId);
    }
    return ifaces_[i]->cancel(bookingId);
  }

};

} // namespace

#endif
