/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Exception_TYPES_H
#define Exception_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace savariwala {

struct ErrorCode {
  enum type {
    Unspecified = 0,
    NotFound = 1
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

typedef struct _ServerError__isset {
  _ServerError__isset() : what(false), err(false) {}
  bool what;
  bool err;
} _ServerError__isset;

class ServerError : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "D6FD826D949221396F4FFC3ECCD3D192";
  static const uint8_t binary_fingerprint[16]; // = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

  ServerError() : what(), err((ErrorCode::type)0) {
  }

  virtual ~ServerError() throw() {}

  std::string what;
  ErrorCode::type err;

  _ServerError__isset __isset;

  void __set_what(const std::string& val) {
    what = val;
  }

  void __set_err(const ErrorCode::type val) {
    err = val;
  }

  bool operator == (const ServerError & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ServerError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServerError &a, ServerError &b);

} // namespace

#endif
