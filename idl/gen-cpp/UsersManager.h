/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UsersManager_H
#define UsersManager_H

#include <thrift/TDispatchProcessor.h>
#include "User_types.h"

namespace savariwala {

class UsersManagerIf {
 public:
  virtual ~UsersManagerIf() {}
  virtual void getUser(User& _return, const std::string& fbUserId) = 0;
  virtual void addUser(const User& user) = 0;
};

class UsersManagerIfFactory {
 public:
  typedef UsersManagerIf Handler;

  virtual ~UsersManagerIfFactory() {}

  virtual UsersManagerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UsersManagerIf* /* handler */) = 0;
};

class UsersManagerIfSingletonFactory : virtual public UsersManagerIfFactory {
 public:
  UsersManagerIfSingletonFactory(const boost::shared_ptr<UsersManagerIf>& iface) : iface_(iface) {}
  virtual ~UsersManagerIfSingletonFactory() {}

  virtual UsersManagerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UsersManagerIf* /* handler */) {}

 protected:
  boost::shared_ptr<UsersManagerIf> iface_;
};

class UsersManagerNull : virtual public UsersManagerIf {
 public:
  virtual ~UsersManagerNull() {}
  void getUser(User& /* _return */, const std::string& /* fbUserId */) {
    return;
  }
  void addUser(const User& /* user */) {
    return;
  }
};

typedef struct _UsersManager_getUser_args__isset {
  _UsersManager_getUser_args__isset() : fbUserId(false) {}
  bool fbUserId;
} _UsersManager_getUser_args__isset;

class UsersManager_getUser_args {
 public:

  UsersManager_getUser_args() : fbUserId() {
  }

  virtual ~UsersManager_getUser_args() throw() {}

  std::string fbUserId;

  _UsersManager_getUser_args__isset __isset;

  void __set_fbUserId(const std::string& val) {
    fbUserId = val;
  }

  bool operator == (const UsersManager_getUser_args & rhs) const
  {
    if (!(fbUserId == rhs.fbUserId))
      return false;
    return true;
  }
  bool operator != (const UsersManager_getUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsersManager_getUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UsersManager_getUser_pargs {
 public:


  virtual ~UsersManager_getUser_pargs() throw() {}

  const std::string* fbUserId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UsersManager_getUser_result__isset {
  _UsersManager_getUser_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _UsersManager_getUser_result__isset;

class UsersManager_getUser_result {
 public:

  UsersManager_getUser_result() {
  }

  virtual ~UsersManager_getUser_result() throw() {}

  User success;
   ::savariwala::ServerError err;

  _UsersManager_getUser_result__isset __isset;

  void __set_success(const User& val) {
    success = val;
  }

  void __set_err(const  ::savariwala::ServerError& val) {
    err = val;
  }

  bool operator == (const UsersManager_getUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const UsersManager_getUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsersManager_getUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UsersManager_getUser_presult__isset {
  _UsersManager_getUser_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _UsersManager_getUser_presult__isset;

class UsersManager_getUser_presult {
 public:


  virtual ~UsersManager_getUser_presult() throw() {}

  User* success;
   ::savariwala::ServerError err;

  _UsersManager_getUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UsersManager_addUser_args__isset {
  _UsersManager_addUser_args__isset() : user(false) {}
  bool user;
} _UsersManager_addUser_args__isset;

class UsersManager_addUser_args {
 public:

  UsersManager_addUser_args() {
  }

  virtual ~UsersManager_addUser_args() throw() {}

  User user;

  _UsersManager_addUser_args__isset __isset;

  void __set_user(const User& val) {
    user = val;
  }

  bool operator == (const UsersManager_addUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UsersManager_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsersManager_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UsersManager_addUser_pargs {
 public:


  virtual ~UsersManager_addUser_pargs() throw() {}

  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UsersManager_addUser_result__isset {
  _UsersManager_addUser_result__isset() : err(false) {}
  bool err;
} _UsersManager_addUser_result__isset;

class UsersManager_addUser_result {
 public:

  UsersManager_addUser_result() {
  }

  virtual ~UsersManager_addUser_result() throw() {}

   ::savariwala::ServerError err;

  _UsersManager_addUser_result__isset __isset;

  void __set_err(const  ::savariwala::ServerError& val) {
    err = val;
  }

  bool operator == (const UsersManager_addUser_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const UsersManager_addUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UsersManager_addUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UsersManager_addUser_presult__isset {
  _UsersManager_addUser_presult__isset() : err(false) {}
  bool err;
} _UsersManager_addUser_presult__isset;

class UsersManager_addUser_presult {
 public:


  virtual ~UsersManager_addUser_presult() throw() {}

   ::savariwala::ServerError err;

  _UsersManager_addUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UsersManagerClient : virtual public UsersManagerIf {
 public:
  UsersManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UsersManagerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUser(User& _return, const std::string& fbUserId);
  void send_getUser(const std::string& fbUserId);
  void recv_getUser(User& _return);
  void addUser(const User& user);
  void send_addUser(const User& user);
  void recv_addUser();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UsersManagerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UsersManagerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UsersManagerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UsersManagerProcessor(boost::shared_ptr<UsersManagerIf> iface) :
    iface_(iface) {
    processMap_["getUser"] = &UsersManagerProcessor::process_getUser;
    processMap_["addUser"] = &UsersManagerProcessor::process_addUser;
  }

  virtual ~UsersManagerProcessor() {}
};

class UsersManagerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UsersManagerProcessorFactory(const ::boost::shared_ptr< UsersManagerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UsersManagerIfFactory > handlerFactory_;
};

class UsersManagerMultiface : virtual public UsersManagerIf {
 public:
  UsersManagerMultiface(std::vector<boost::shared_ptr<UsersManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UsersManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UsersManagerIf> > ifaces_;
  UsersManagerMultiface() {}
  void add(boost::shared_ptr<UsersManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUser(User& _return, const std::string& fbUserId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUser(_return, fbUserId);
    }
    ifaces_[i]->getUser(_return, fbUserId);
    return;
  }

  void addUser(const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(user);
    }
    ifaces_[i]->addUser(user);
  }

};

} // namespace

#endif
