/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MapPointProvider_H
#define MapPointProvider_H

#include <thrift/TDispatchProcessor.h>
#include "NearestPoint_types.h"

namespace savariwala {

class MapPointProviderIf {
 public:
  virtual ~MapPointProviderIf() {}
  virtual void getMapPoint(std::vector<MapPoint> & _return, const bool isSrc, const double latitude, const double longitude) = 0;
};

class MapPointProviderIfFactory {
 public:
  typedef MapPointProviderIf Handler;

  virtual ~MapPointProviderIfFactory() {}

  virtual MapPointProviderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MapPointProviderIf* /* handler */) = 0;
};

class MapPointProviderIfSingletonFactory : virtual public MapPointProviderIfFactory {
 public:
  MapPointProviderIfSingletonFactory(const boost::shared_ptr<MapPointProviderIf>& iface) : iface_(iface) {}
  virtual ~MapPointProviderIfSingletonFactory() {}

  virtual MapPointProviderIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MapPointProviderIf* /* handler */) {}

 protected:
  boost::shared_ptr<MapPointProviderIf> iface_;
};

class MapPointProviderNull : virtual public MapPointProviderIf {
 public:
  virtual ~MapPointProviderNull() {}
  void getMapPoint(std::vector<MapPoint> & /* _return */, const bool /* isSrc */, const double /* latitude */, const double /* longitude */) {
    return;
  }
};

typedef struct _MapPointProvider_getMapPoint_args__isset {
  _MapPointProvider_getMapPoint_args__isset() : isSrc(false), latitude(false), longitude(false) {}
  bool isSrc;
  bool latitude;
  bool longitude;
} _MapPointProvider_getMapPoint_args__isset;

class MapPointProvider_getMapPoint_args {
 public:

  MapPointProvider_getMapPoint_args() : isSrc(0), latitude(0), longitude(0) {
  }

  virtual ~MapPointProvider_getMapPoint_args() throw() {}

  bool isSrc;
  double latitude;
  double longitude;

  _MapPointProvider_getMapPoint_args__isset __isset;

  void __set_isSrc(const bool val) {
    isSrc = val;
  }

  void __set_latitude(const double val) {
    latitude = val;
  }

  void __set_longitude(const double val) {
    longitude = val;
  }

  bool operator == (const MapPointProvider_getMapPoint_args & rhs) const
  {
    if (!(isSrc == rhs.isSrc))
      return false;
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    return true;
  }
  bool operator != (const MapPointProvider_getMapPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapPointProvider_getMapPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapPointProvider_getMapPoint_pargs {
 public:


  virtual ~MapPointProvider_getMapPoint_pargs() throw() {}

  const bool* isSrc;
  const double* latitude;
  const double* longitude;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapPointProvider_getMapPoint_result__isset {
  _MapPointProvider_getMapPoint_result__isset() : success(false) {}
  bool success;
} _MapPointProvider_getMapPoint_result__isset;

class MapPointProvider_getMapPoint_result {
 public:

  MapPointProvider_getMapPoint_result() {
  }

  virtual ~MapPointProvider_getMapPoint_result() throw() {}

  std::vector<MapPoint>  success;

  _MapPointProvider_getMapPoint_result__isset __isset;

  void __set_success(const std::vector<MapPoint> & val) {
    success = val;
  }

  bool operator == (const MapPointProvider_getMapPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapPointProvider_getMapPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapPointProvider_getMapPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapPointProvider_getMapPoint_presult__isset {
  _MapPointProvider_getMapPoint_presult__isset() : success(false) {}
  bool success;
} _MapPointProvider_getMapPoint_presult__isset;

class MapPointProvider_getMapPoint_presult {
 public:


  virtual ~MapPointProvider_getMapPoint_presult() throw() {}

  std::vector<MapPoint> * success;

  _MapPointProvider_getMapPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MapPointProviderClient : virtual public MapPointProviderIf {
 public:
  MapPointProviderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MapPointProviderClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getMapPoint(std::vector<MapPoint> & _return, const bool isSrc, const double latitude, const double longitude);
  void send_getMapPoint(const bool isSrc, const double latitude, const double longitude);
  void recv_getMapPoint(std::vector<MapPoint> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MapPointProviderProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MapPointProviderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MapPointProviderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getMapPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MapPointProviderProcessor(boost::shared_ptr<MapPointProviderIf> iface) :
    iface_(iface) {
    processMap_["getMapPoint"] = &MapPointProviderProcessor::process_getMapPoint;
  }

  virtual ~MapPointProviderProcessor() {}
};

class MapPointProviderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MapPointProviderProcessorFactory(const ::boost::shared_ptr< MapPointProviderIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MapPointProviderIfFactory > handlerFactory_;
};

class MapPointProviderMultiface : virtual public MapPointProviderIf {
 public:
  MapPointProviderMultiface(std::vector<boost::shared_ptr<MapPointProviderIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MapPointProviderMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MapPointProviderIf> > ifaces_;
  MapPointProviderMultiface() {}
  void add(boost::shared_ptr<MapPointProviderIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getMapPoint(std::vector<MapPoint> & _return, const bool isSrc, const double latitude, const double longitude) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMapPoint(_return, isSrc, latitude, longitude);
    }
    ifaces_[i]->getMapPoint(_return, isSrc, latitude, longitude);
    return;
  }

};

} // namespace

#endif
