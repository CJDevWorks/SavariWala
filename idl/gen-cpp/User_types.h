/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef User_TYPES_H
#define User_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "Exception_types.h"


namespace savariwala {

typedef struct _User__isset {
  _User__isset() : fbUserId(false), userName(false), isPassenger(false) {}
  bool fbUserId;
  bool userName;
  bool isPassenger;
} _User__isset;

class User {
 public:

  static const char* ascii_fingerprint; // = "7F21FB535884165D6350077C7B970E93";
  static const uint8_t binary_fingerprint[16]; // = {0x7F,0x21,0xFB,0x53,0x58,0x84,0x16,0x5D,0x63,0x50,0x07,0x7C,0x7B,0x97,0x0E,0x93};

  User() : fbUserId(), userName(), isPassenger(0) {
  }

  virtual ~User() throw() {}

  std::string fbUserId;
  std::string userName;
  bool isPassenger;

  _User__isset __isset;

  void __set_fbUserId(const std::string& val) {
    fbUserId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_isPassenger(const bool val) {
    isPassenger = val;
  }

  bool operator == (const User & rhs) const
  {
    if (!(fbUserId == rhs.fbUserId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(isPassenger == rhs.isPassenger))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(User &a, User &b);

} // namespace

#endif
