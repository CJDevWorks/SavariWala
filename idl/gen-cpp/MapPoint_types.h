/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MapPoint_TYPES_H
#define MapPoint_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace savariwala {

typedef struct _MapPoint__isset {
  _MapPoint__isset() : latitude(false), longitude(false), description(false) {}
  bool latitude;
  bool longitude;
  bool description;
} _MapPoint__isset;

class MapPoint {
 public:

  static const char* ascii_fingerprint; // = "3141FDB05C98B5AB301A852FF546E1D6";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0x41,0xFD,0xB0,0x5C,0x98,0xB5,0xAB,0x30,0x1A,0x85,0x2F,0xF5,0x46,0xE1,0xD6};

  MapPoint() : latitude(0), longitude(0), description() {
  }

  virtual ~MapPoint() throw() {}

  double latitude;
  double longitude;
  std::string description;

  _MapPoint__isset __isset;

  void __set_latitude(const double val) {
    latitude = val;
  }

  void __set_longitude(const double val) {
    longitude = val;
  }

  void __set_description(const std::string& val) {
    description = val;
  }

  bool operator == (const MapPoint & rhs) const
  {
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const MapPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(MapPoint &a, MapPoint &b);

} // namespace

#endif
